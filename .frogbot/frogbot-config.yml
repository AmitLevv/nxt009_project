# The "params" section includes the configuration of a single Git repository that needs to be scanned.
# For Azure Repos, Bitbucket Server and GitHub with JFrog Pipelines or Jenkins, you can define multiple "params" sections one after the other, for scanning multiple
# Git repositories in the same organization.
- params:
    # Git parameters
    git:
      # [Mandatory]
      # Name of the git repository to scan
      repoName: nxt009_project
      # [Mandatory]
      # List of branches to scan
      branches:
        - master
      # [Optional]
      # Template for the branch name generated by Frogbot when creating pull requests with fixes.
      # The template must include ${BRANCH_NAME_HASH}, to ensure that the generated branch name is unique.
      # The template can optionally include the ${IMPACTED_PACKAGE} and ${FIX_VERSION} variables.
      # branchNameTemplate: "frogbot-${IMPACTED_PACKAGE}-${BRANCH_NAME_HASH}"
      # [Optional]
      # Template for the commit message generated by Frogbot when creating pull requests with fixes
      # The template can optionally include the ${IMPACTED_PACKAGE} and ${FIX_VERSION} variables.
      # commitMessageTemplate: "Upgrade ${IMPACTED_PACKAGE} to ${FIX_VERSION}"
      # [Optional]
      # Template for the pull request title generated by Frogbot when creating pull requests with fixes.
      # The template can optionally include the ${IMPACTED_PACKAGE} and ${FIX_VERSION} variables.
      # pullRequestTitleTemplate: "[üê∏ Frogbot] Upgrade ${IMPACTED_PACKAGE} to ${FIX_VERSION}"
      # [Optional, Default: false]
      # If true, Frogbot creates a single pull request with all the fixes.
      # If false, Frogbot creates a separate pull request for each fix.
      # aggregateFixes: false
      # [Optional, Default: eco-system+frogbot@jfrog.com]
      # Set the email of the commit author
      # emailAuthor: ""
    # Frogbot scanning parameters
    scan:
      # [Default: false]
      # Frogbot displays all existing vulnerabilities, including the ones that were not added by the pull request
      # includeAllVulnerabilities: true
      # [Default: false]
      # When adding new comments on pull requests, keep old comments that were added by previous scans.
      # avoidPreviousPrCommentsDeletion: true
      # [Default: true]
      # Frogbot does not fail the task if security issues are found and this parameter is set to false
      # failOnSecurityIssues: false
      # [Default: false]
      # Handle vulnerabilities with fix versions only
      # fixableOnly: true
      # [Optional]
      # Set the minimum severity for vulnerabilities that should be fixed and commented on in pull requests
      # The following values are accepted: Low, Medium, High or Critical
      # minSeverity: ""
      # [Optional]
      # List of email addresses to receive emails about secrets that has been detected in a pull request scan.
      # Applies only to servers that are entitled to JFrog Advanced Security.
      # emailReceivers:
      # - user@company.com
      # List of subprojects / project dirs inside the Git repository
      projects:
        - workingDirs:
            - "."
          pipRequirementsFile: "./requirements.txt"
        # Additional working directories with their corresponding requirements.txt files
        - workingDirs:
            - "./nxt009_runtime/tools/nxt009_hw_features"
          pipRequirementsFile: "./nxt009_runtime/tools/nxt009_hw_features/requirements.txt"
        - workingDirs:
            - "./nxt009_runtime/tools/nxt009_nfi_bp_viz"
          pipRequirementsFile: "./nxt009_runtime/tools/nxt009_nfi_bp_viz/requirements.txt"
        - workingDirs:
            - "./nxt009_runtime/tools/nxt009_perftoolbox"
          pipRequirementsFile: "./nxt009_runtime/tools/nxt009_perftoolbox/requirements.txt"
        - workingDirs:
            - "./nxt009_runtime/tools/nxt009_telem_analyzer"
          pipRequirementsFile: "./nxt009_runtime/tools/nxt009_telem_analyzer/requirements.txt"
        - workingDirs:
            - "./nxt009_runtime/ci/emulation/Shadows_sync"
          pipRequirementsFile: "./nxt009_runtime/ci/emulation/Shadows_sync/requirements.txt"
        - workingDirs:
            - "./nxt009_runtime/nxt009_hwsim"
          pipRequirementsFile: "./nxt009_runtime/nxt009_hwsim/requirements.txt"
        - workingDirs:
            - "./nxt009_device_adapter/zephyr_workspace/zephyr/scripts/dts/python-devicetree"
          pipRequirementsFile: "./nxt009_device_adapter/zephyr_workspace/zephyr/scripts/dts/python-devicetree/requirements.txt"
        - workingDirs:
            - "./nxt009_device_adapter/zephyr_workspace/zephyr/scripts"
          pipRequirementsFile: "./nxt009_device_adapter/zephyr_workspace/zephyr/scripts/requirements.txt"
        - workingDirs:
            - "./tools/testing"
          pipRequirementsFile: "./tools/testing/requirements.txt"
        - workingDirs:
            - "./handoff_tests"
          pipRequirementsFile: "./handoff_tests/requirements.txt"
        - workingDirs:
            - "./application_tests"
          pipRequirementsFile: "./application_tests/requirements.txt"
        - workingDirs:
            - "./scripts/optimizer"
          pipRequirementsFile: "./scripts/optimizer/requirements.txt"
        - workingDirs:
            - "./packages"
          pipRequirementsFile: "./packages/requirements.txt"
        - workingDirs:
            - "./applications/automatic_runs/Veloce"
          pipRequirementsFile: "./applications/automatic_runs/Veloce/requirements.txt"
        - workingDirs:
            - "./applications/nextrunner"
          pipRequirementsFile: "./applications/nextrunner/requirements.txt"
        - workingDirs:
            - "./applications/nextrunner/applications/microbenchmarks"
          pipRequirementsFile: "./applications/nextrunner/applications/microbenchmarks/requirements.txt"
        - workingDirs:
            - "./applications/nextrunner/modules/postproc"
          pipRequirementsFile: "./applications/nextrunner/modules/postproc/requirements.txt"
        - workingDirs:
            - "./applications"
          pipRequirementsFile: "./applications/requirements.txt"
        - workingDirs:
            - "./applications/qa_automation_tests"
          pipRequirementsFile: "./applications/qa_automation_tests/requirements.txt"
        - workingDirs:
            - "./applications/application_db"
          pipRequirementsFile: "./applications/application_db/requirements.txt"
        - workingDirs:
            - "./nxt009-soc-sw/tests"
          pipRequirementsFile: "./nxt009-soc-sw/tests/requirements.txt"
        - workingDirs:
            - "./nxt009-soc-sw/release"
          pipRequirementsFile: "./nxt009-soc-sw/release/requirements.txt"
        - workingDirs:
            - "./nxt009-soc-sw/bootrom/tests"
          pipRequirementsFile: "./nxt009-soc-sw/bootrom/tests/requirements.txt"
        - workingDirs:
            - "./nxt009-soc-sw/scripts"
          pipRequirementsFile: "./nxt009-soc-sw/scripts/requirements.txt"
        - workingDirs:
            - "./deps/ctcache"
          pipRequirementsFile: "./deps/ctcache/requirements.txt"
        - workingDirs:
            - "./telemetry/nxt009_telem_parser/test"
          pipRequirementsFile: "./telemetry/nxt009_telem_parser/test/requirements.txt"
        - workingDirs:
            - "./compilers/optimizer/tools/infer_telemetry"
          pipRequirementsFile: "./compilers/optimizer/tools/infer_telemetry/requirements.txt"
        - workingDirs:
            - "./compilers/mlir"
          pipRequirementsFile: "./compilers/mlir/requirements.txt"
        - workingDirs:
            - "./compilers/mlir/mlir-docs-website"
          pipRequirementsFile: "./compilers/mlir/mlir-docs-website/requirements.txt"
        - workingDirs:
            - "./compilers/proj_adapter"
          pipRequirementsFile: "./compilers/proj_adapter/requirements.txt"
        - workingDirs:
            - "./compilers/projection"
          pipRequirementsFile: "./compilers/projection/requirements.txt"
        - workingDirs:
            - "./compilers/projection/src/thread_simulator"
          pipRequirementsFile: "./compilers/projection/src/thread_simulator/requirements.txt"
        - workingDirs:
            - "./compilers/projection/src/py_inext/application_db"
          pipRequirementsFile: "./compilers/projection/src/py_inext/application_db/requirements.txt"
      # [Default: ["*.git*", "*node_modules*", "*target*", "*venv*", "*test*"]]
      # List of exclusion patterns (utilizing wildcards) for excluding paths in the source code of the Git repository during SCA scans.
      pathExclusions:
        - "application_tests"
        - "applications"
        - "drivers"
        - "handoff_tests"
        - "nfisim"
        - "nxt009_runtime/projection"
        - "packages"
        - "parallel-sdk"
        - "py_nextutils"
        - "registers"
        - "rpc_shim"
        - "simulator"
        - "slg2bin"
        - "syntacore"
        - "test_assets"
        - "tools"
      # [Mandatory for pip only if using requirements file, Default: pip install .]
      # The requirements file name that is used to install dependencies in case of pip package manager
      # pipRequirementsFile:
      #  - "./requirements.txt"
      #  - "./scripts/optimizer/requirements.txt"
      # [Default: true]
      # Use Gradle Wrapper (gradlew/gradlew.bat) to run Gradle
      #   useWrapper: true
      # [Optional]
      # Name of a Virtual Repository in Artifactory to resolve (download) the project dependencies from
      #   repository: ""
    # JFrog Platform parameters
    jfrogPlatform:
    # [Optional]
    # JFrog project key. Learn more about it [here](https://www.jfrog.com/confluence/display/JFROG/Projects)
    # jfrogProjectKey: ""
    # [Optional]
    # Xray Watches. Learn more about it [here](https://www.jfrog.com/confluence/display/JFROG/Configuring+Xray+Watches)
    # watches:
    #   - "ns_watch"
